{"version":3,"sources":["images/loading.gif","images/A1.mp4","firebase/config.js","hooks/useStorage.js","components/ProgessBar.js","components/Form.js","hooks/useFirestore.js","components/ImageGrid.js","components/Hero.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","url","setUrl","error","setError","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","className","style","width","src","loading","Math","floor","Form","types","htmlFor","type","id","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsubscribe","orderBy","onSnapshot","documents","forEach","doc","push","data","ImageGrid","map","key","alt","Hero","autoPlay","loop","hero","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7c8dab22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.57615b8c.gif\";","module.exports = __webpack_public_path__ + \"static/media/A1.e96e78f9.mp4\";","import * as firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyD9h8S8cZznLQ8Dr52UgwzPPNCRZ-2bGvs\",\n  authDomain: \"bestmemes-d9abd.firebaseapp.com\",\n  databaseURL: \"https://bestmemes-d9abd.firebaseio.com\",\n  projectId: \"bestmemes-d9abd\",\n  storageBucket: \"bestmemes-d9abd.appspot.com\",\n  messagingSenderId: \"952776747855\",\n  appId: \"1:952776747855:web:f5cb0cebb9075e5d5c333a\",\n  measurementId: \"G-5J6L41ME9S\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n//firebase.analytics();\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\nexport { projectStorage, projectFirestore, timestamp };\n","import { useState, useEffect } from \"react\";\nimport {\n  projectStorage,\n  projectFirestore,\n  timestamp\n} from \"../firebase/config\";\n\nconst useStorage = file => {\n  const [progress, setProgress] = useState(0);\n  const [url, setUrl] = useState(null);\n  const [error, setError] = useState(null);\n  const [likes, setLikes] = useState(0);\n\n  useEffect(() => {\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection(\"images\");\n\n    storageRef.put(file).on(\n      \"state_changed\",\n      snap => {\n        const percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n\n        setProgress(percentage);\n      },\n      err => {\n        setError(err);\n      },\n      async () => {\n        const url = await storageRef.getDownloadURL();\n        const createdAt = timestamp();\n\n        collectionRef.add({ url, createdAt });\n        setUrl(url);\n      }\n    );\n  }, [file]);\n\n  return { progress, url, error };\n};\n\nexport default useStorage;\n","import React, { useEffect } from \"react\";\nimport useStorage from \"../hooks/useStorage\";\nimport loading from \"../images/loading.gif\";\n\nconst ProgressBar = ({ file, setFile }) => {\n  const { url, progress } = useStorage(file);\n\n  useEffect(() => {\n    if (url) {\n      setFile(null);\n    }\n  }, [url, setFile]);\n\n  return (\n    <div className=\"progress-bar\" style={{ width: progress + \"%\" }}>\n      <img className=\"loading\" src={loading} />\n      <br />\n      {Math.floor(progress)}\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React, { useState } from \"react\";\nimport ProgressBar from \"./ProgessBar\";\n\nconst Form = () => {\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(null);\n  const types = [\"image/jpg\", \"image/jpeg\", \"image/png\", \"image/gif\"];\n\n  const changeHandler = e => {\n    const selected = e.target.files[0];\n\n    if (selected && types.includes(selected.type)) {\n      setFile(selected);\n      setError(\"\");\n    } else {\n      setFile(null);\n      setError(\"Let's upload something fun - .jpg .jpeg .png .gif\");\n    }\n  };\n\n  return (\n    <form>\n      <label htmlFor=\"file\">\n        +<input type=\"file\" id=\"file\" onChange={changeHandler} />\n      </label>\n      <div className=\"output\">\n        {error && <div className=\"error\">{error}</div>}\n        {file && <div>{file.name}</div>}\n        {file && <ProgressBar file={file} setFile={setFile} />}\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import { useState, useEffect } from \"react\";\nimport { projectFirestore } from \"../firebase/config\";\n\nconst useFirestore = collection => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsubscribe = projectFirestore\n      .collection(collection)\n      .orderBy(\"createdAt\", \"desc\")\n      .onSnapshot(snap => {\n        const documents = [];\n\n        snap.forEach(doc => {\n          documents.push({ ...doc.data(), id: doc.id });\n        });\n        setDocs(documents);\n      });\n\n    return () => unsubscribe();\n  }, [collection]);\n\n  return { docs };\n};\n\nexport default useFirestore;\n","import React from \"react\";\nimport useFirestore from \"../hooks/useFirestore\";\n\nconst ImageGrid = () => {\n  const { docs } = useFirestore(\"images\");\n\n  return (\n    <div className=\"img-grid\">\n      {docs &&\n        docs.map(doc => (\n          <div className=\"img-wrap\" key={doc.id}>\n            <img src={doc.url} alt=\"\" />\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default ImageGrid;\n","import React from \"react\";\nimport hero from \"../images/A1.mp4\";\n\nconst Hero = () => {\n  return (\n    <div>\n      <video autoPlay loop>\n        <source src={hero} type=\"video/mp4\" />\n      </video>\n      <div className=\"header\">Upload something interesting and Vote</div>\n    </div>\n  );\n};\n\nexport default Hero;\n","import React from \"react\";\nimport Form from \"./components/Form\";\nimport ImageGrid from \"./components/ImageGrid\";\nimport \"./App.css\";\nimport \"./index.css\";\nimport Hero from \"./components/Hero\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hero />\n      <Form />\n      <ImageGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}